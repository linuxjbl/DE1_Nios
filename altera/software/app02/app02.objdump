
app02.elf:     file format elf32-littlenios2
app02.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000348 memsz 0x00000358 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001368  2**0
                  CONTENTS
  2 .text         00000328  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  00010348  00010348  00001348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000000  00010368  00010368  00001368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000010  00010368  00010368  00001368  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00010378  00010378  00001368  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001390  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000ad3  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000630  00000000  00000000  00001fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000072c  00000000  00000000  000025fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000059c  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003558  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004362  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004365  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004372  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004373  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004389  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0000439a  2**0
                  CONTENTS, READONLY
 26 .jdi          000050b9  00000000  00000000  000043b9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009743f  00000000  00000000  00009472  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010348 l    d  .rodata	00000000 .rodata
00010368 l    d  .rwdata	00000000 .rwdata
00010368 l    d  .bss	00000000 .bss
00010378 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../app02_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00010260 g     F .text	0000002c alt_main
00010368 g       *ABS*	00000000 __flash_rwdata_start
0001028c g     F .text	00000038 alt_putstr
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001036c g     O .bss	00000004 alt_argv
00018368 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010378 g       *ABS*	00000000 __bss_end
0001031c g     F .text	00000004 alt_dcache_flush_all
00010368 g       *ABS*	00000000 __ram_rwdata_end
00010368 g       *ABS*	00000000 __ram_rodata_end
00010374 g     O .bss	00000004 jtag_uart_0
00010378 g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
000102e8 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000102e4 g     F .text	00000004 alt_sys_init
00010368 g       *ABS*	00000000 __ram_rwdata_start
00010348 g       *ABS*	00000000 __ram_rodata_start
00010378 g       *ABS*	00000000 __alt_stack_base
00010368 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000124 main
00010368 g     O .bss	00000004 alt_envp
00010348 g       *ABS*	00000000 __flash_rodata_start
000102c4 g     F .text	00000020 alt_irq_init
00010370 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010368 g       *ABS*	00000000 _edata
00010378 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010324 g     F .text	00000008 altera_nios2_qsys_irq_init
00014000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
0001032c g     F .text	0000001c strlen
00010320 g     F .text	00000004 alt_icache_flush_all
00010180 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0da14 	ori	gp,gp,33640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080da14 	ori	r2,r2,872

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0de14 	ori	r3,r3,888

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff7cdc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00101800 	call	10180 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00102600 	call	10260 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff7cf0>

0001005c <main>:
#include "system.h"

int main()
{ 

  alt_putstr("Hello from Nios II! by JBL \n");
   1005c:	01000074 	movhi	r4,1

#include "sys/alt_stdio.h"
#include "system.h"

int main()
{ 
   10060:	deffff04 	addi	sp,sp,-4

  alt_putstr("Hello from Nios II! by JBL \n");
   10064:	2100d204 	addi	r4,r4,840

#include "sys/alt_stdio.h"
#include "system.h"

int main()
{ 
   10068:	dfc00015 	stw	ra,0(sp)

  alt_putstr("Hello from Nios II! by JBL \n");
   1006c:	001028c0 	call	1028c <alt_putstr>

  /* Event loop never exits. */

	*(volatile unsigned long *)HEX0_BASE = 0xc0;
   10070:	00c03004 	movi	r3,192
   10074:	00800134 	movhi	r2,4
   10078:	10c00015 	stw	r3,0(r2)

	*(volatile unsigned long *)PERIOD0_BASE = 50000000;
   1007c:	0080bef4 	movhi	r2,763
   10080:	10bc2004 	addi	r2,r2,-3968
   10084:	00c000b4 	movhi	r3,2
	*(volatile unsigned long *)DECODE0_BASE = 25000000;
   10088:	01005f74 	movhi	r4,381

  /* Event loop never exits. */

	*(volatile unsigned long *)HEX0_BASE = 0xc0;

	*(volatile unsigned long *)PERIOD0_BASE = 50000000;
   1008c:	18800015 	stw	r2,0(r3)
	*(volatile unsigned long *)DECODE0_BASE = 25000000;
   10090:	211e1004 	addi	r4,r4,30784
   10094:	00c000f4 	movhi	r3,3
   10098:	19000015 	stw	r4,0(r3)
	*(volatile unsigned long *)PERIOD1_BASE = 20000000;
   1009c:	00c000b4 	movhi	r3,2
   100a0:	01004c74 	movhi	r4,305
   100a4:	210b4004 	addi	r4,r4,11520
   100a8:	18c40004 	addi	r3,r3,4096
   100ac:	19000015 	stw	r4,0(r3)
	*(volatile unsigned long *)DECODE1_BASE = 10000000;
   100b0:	014000f4 	movhi	r5,3
   100b4:	00c02674 	movhi	r3,153
   100b8:	18e5a004 	addi	r3,r3,-27008
   100bc:	29440004 	addi	r5,r5,4096
   100c0:	28c00015 	stw	r3,0(r5)
	*(volatile unsigned long *)PERIOD2_BASE = 100000000;
   100c4:	018000b4 	movhi	r6,2
   100c8:	01417db4 	movhi	r5,1526
   100cc:	29784004 	addi	r5,r5,-7936
   100d0:	31880004 	addi	r6,r6,8192
   100d4:	31400015 	stw	r5,0(r6)
	*(volatile unsigned long *)DECODE2_BASE = 50000000;
   100d8:	018000f4 	movhi	r6,3
   100dc:	31880004 	addi	r6,r6,8192
   100e0:	30800015 	stw	r2,0(r6)
	*(volatile unsigned long *)PERIOD3_BASE = 50000000;
   100e4:	018000b4 	movhi	r6,2
   100e8:	318c0004 	addi	r6,r6,12288
   100ec:	30800015 	stw	r2,0(r6)
	*(volatile unsigned long *)DECODE3_BASE = 10000000;
   100f0:	018000f4 	movhi	r6,3
   100f4:	318c0004 	addi	r6,r6,12288
   100f8:	30c00015 	stw	r3,0(r6)
	*(volatile unsigned long *)PERIOD4_BASE = 50000000;
   100fc:	018000b4 	movhi	r6,2
   10100:	31900004 	addi	r6,r6,16384
   10104:	30800015 	stw	r2,0(r6)
	*(volatile unsigned long *)DECODE4_BASE = 40000000;
   10108:	008000f4 	movhi	r2,3
   1010c:	018098b4 	movhi	r6,610
   10110:	10900004 	addi	r2,r2,16384
   10114:	31968004 	addi	r6,r6,23040
   10118:	11800015 	stw	r6,0(r2)
	*(volatile unsigned long *)PERIOD5_BASE = 10000000;
   1011c:	008000b4 	movhi	r2,2
   10120:	10940004 	addi	r2,r2,20480
   10124:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE5_BASE = 2000000;
   10128:	008000f4 	movhi	r2,3
   1012c:	00c007f4 	movhi	r3,31
   10130:	18e12004 	addi	r3,r3,-31616
   10134:	10940004 	addi	r2,r2,20480
   10138:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)PERIOD6_BASE = 150000000;
   1013c:	008000b4 	movhi	r2,2
   10140:	00c23c74 	movhi	r3,2289
   10144:	18f46004 	addi	r3,r3,-11904
   10148:	10980004 	addi	r2,r2,24576
   1014c:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE6_BASE = 100000000;
   10150:	008000f4 	movhi	r2,3
   10154:	10980004 	addi	r2,r2,24576
   10158:	11400015 	stw	r5,0(r2)
	*(volatile unsigned long *)PERIOD7_BASE = 70000000;
   1015c:	00c10b34 	movhi	r3,1068
   10160:	008000b4 	movhi	r2,2
   10164:	109c0004 	addi	r2,r2,28672
   10168:	18c76004 	addi	r3,r3,7552
   1016c:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE7_BASE = 20000000;
   10170:	008000f4 	movhi	r2,3
   10174:	109c0004 	addi	r2,r2,28672
   10178:	11000015 	stw	r4,0(r2)
   1017c:	003fff06 	br	1017c <_gp+0xffff7e14>

00010180 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10180:	deffff04 	addi	sp,sp,-4
   10184:	01000074 	movhi	r4,1
   10188:	01400074 	movhi	r5,1
   1018c:	dfc00015 	stw	ra,0(sp)
   10190:	2100da04 	addi	r4,r4,872
   10194:	2940da04 	addi	r5,r5,872

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10198:	2140061e 	bne	r4,r5,101b4 <alt_load+0x34>
   1019c:	01000074 	movhi	r4,1
   101a0:	01400074 	movhi	r5,1
   101a4:	21000804 	addi	r4,r4,32
   101a8:	29400804 	addi	r5,r5,32
   101ac:	2140121e 	bne	r4,r5,101f8 <alt_load+0x78>
   101b0:	00000b06 	br	101e0 <alt_load+0x60>
   101b4:	00c00074 	movhi	r3,1
   101b8:	18c0da04 	addi	r3,r3,872
   101bc:	1907c83a 	sub	r3,r3,r4
   101c0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101c4:	10fff526 	beq	r2,r3,1019c <_gp+0xffff7e34>
    {
      *to++ = *from++;
   101c8:	114f883a 	add	r7,r2,r5
   101cc:	39c00017 	ldw	r7,0(r7)
   101d0:	110d883a 	add	r6,r2,r4
   101d4:	10800104 	addi	r2,r2,4
   101d8:	31c00015 	stw	r7,0(r6)
   101dc:	003ff906 	br	101c4 <_gp+0xffff7e5c>
   101e0:	01000074 	movhi	r4,1
   101e4:	01400074 	movhi	r5,1
   101e8:	2100d204 	addi	r4,r4,840
   101ec:	2940d204 	addi	r5,r5,840

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101f0:	2140101e 	bne	r4,r5,10234 <alt_load+0xb4>
   101f4:	00000b06 	br	10224 <alt_load+0xa4>
   101f8:	00c00074 	movhi	r3,1
   101fc:	18c00804 	addi	r3,r3,32
   10200:	1907c83a 	sub	r3,r3,r4
   10204:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10208:	10fff526 	beq	r2,r3,101e0 <_gp+0xffff7e78>
    {
      *to++ = *from++;
   1020c:	114f883a 	add	r7,r2,r5
   10210:	39c00017 	ldw	r7,0(r7)
   10214:	110d883a 	add	r6,r2,r4
   10218:	10800104 	addi	r2,r2,4
   1021c:	31c00015 	stw	r7,0(r6)
   10220:	003ff906 	br	10208 <_gp+0xffff7ea0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10224:	001031c0 	call	1031c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10228:	dfc00017 	ldw	ra,0(sp)
   1022c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10230:	00103201 	jmpi	10320 <alt_icache_flush_all>
   10234:	00c00074 	movhi	r3,1
   10238:	18c0da04 	addi	r3,r3,872
   1023c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10240:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10244:	18bff726 	beq	r3,r2,10224 <_gp+0xffff7ebc>
    {
      *to++ = *from++;
   10248:	114f883a 	add	r7,r2,r5
   1024c:	39c00017 	ldw	r7,0(r7)
   10250:	110d883a 	add	r6,r2,r4
   10254:	10800104 	addi	r2,r2,4
   10258:	31c00015 	stw	r7,0(r6)
   1025c:	003ff906 	br	10244 <_gp+0xffff7edc>

00010260 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10260:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10264:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10268:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1026c:	00102c40 	call	102c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10270:	00102e40 	call	102e4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10274:	d1a00017 	ldw	r6,-32768(gp)
   10278:	d1600117 	ldw	r5,-32764(gp)
   1027c:	d1200217 	ldw	r4,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10280:	dfc00017 	ldw	ra,0(sp)
   10284:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10288:	001005c1 	jmpi	1005c <main>

0001028c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1028c:	defffe04 	addi	sp,sp,-8
   10290:	dc000015 	stw	r16,0(sp)
   10294:	dfc00115 	stw	ra,4(sp)
   10298:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1029c:	001032c0 	call	1032c <strlen>
   102a0:	01000074 	movhi	r4,1
   102a4:	000f883a 	mov	r7,zero
   102a8:	100d883a 	mov	r6,r2
   102ac:	800b883a 	mov	r5,r16
   102b0:	2100dd04 	addi	r4,r4,884
#else
    return fputs(str, stdout);
#endif
#endif
}
   102b4:	dfc00117 	ldw	ra,4(sp)
   102b8:	dc000017 	ldw	r16,0(sp)
   102bc:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   102c0:	00102e81 	jmpi	102e8 <altera_avalon_jtag_uart_write>

000102c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   102c4:	deffff04 	addi	sp,sp,-4
   102c8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   102cc:	00103240 	call	10324 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   102d0:	00800044 	movi	r2,1
   102d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   102d8:	dfc00017 	ldw	ra,0(sp)
   102dc:	dec00104 	addi	sp,sp,4
   102e0:	f800283a 	ret

000102e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102e4:	f800283a 	ret

000102e8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   102e8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   102ec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   102f0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102f4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   102f8:	2980072e 	bgeu	r5,r6,10318 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102fc:	38c00037 	ldwio	r3,0(r7)
   10300:	18ffffec 	andhi	r3,r3,65535
   10304:	183ffc26 	beq	r3,zero,102f8 <_gp+0xffff7f90>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10308:	28c00007 	ldb	r3,0(r5)
   1030c:	20c00035 	stwio	r3,0(r4)
   10310:	29400044 	addi	r5,r5,1
   10314:	003ff806 	br	102f8 <_gp+0xffff7f90>

  return count;
}
   10318:	f800283a 	ret

0001031c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1031c:	f800283a 	ret

00010320 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10320:	f800283a 	ret

00010324 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10324:	000170fa 	wrctl	ienable,zero
   10328:	f800283a 	ret

0001032c <strlen>:
   1032c:	2005883a 	mov	r2,r4
   10330:	10c00007 	ldb	r3,0(r2)
   10334:	18000226 	beq	r3,zero,10340 <strlen+0x14>
   10338:	10800044 	addi	r2,r2,1
   1033c:	003ffc06 	br	10330 <_gp+0xffff7fc8>
   10340:	1105c83a 	sub	r2,r2,r4
   10344:	f800283a 	ret
