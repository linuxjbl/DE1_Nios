
app01.elf:     file format elf32-littlenios2
app01.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000005c0 memsz 0x000005c0 flags r-x
    LOAD off    0x000015e0 vaddr 0x000105e0 paddr 0x000105e8 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000015f0 vaddr 0x000105f0 paddr 0x000105f0 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000015e8  2**0
                  CONTENTS
  2 .text         0000059c  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  000105bc  000105bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000105e0  000105e8  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000105f0  000105f0  000015f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00010604  00010604  000015e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000170  00000000  00000000  00001610  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c9a  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000747  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000821  00000000  00000000  00002b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001d4  00000000  00000000  00003384  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000603  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000019a  00000000  00000000  00003b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00003d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004bba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004bbd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004bc9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004bca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00004bd6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004be1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00004bec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  00004bf2  2**0
                  CONTENTS, READONLY
 26 .jdi          000050b9  00000000  00000000  00004c11  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004179e  00000000  00000000  00009cca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000105bc l    d  .rodata	00000000 .rodata
000105e0 l    d  .rwdata	00000000 .rwdata
000105f0 l    d  .bss	00000000 .bss
00010604 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../app01_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000104d4 g     F .text	0000002c alt_main
000105e8 g       *ABS*	00000000 __flash_rwdata_start
00010500 g     F .text	00000038 alt_putstr
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010094 g     F .text	000000fc SevenSegEnc
000105f8 g     O .bss	00000004 alt_argv
000185e0 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010604 g       *ABS*	00000000 __bss_end
00010590 g     F .text	00000004 alt_dcache_flush_all
000105e8 g       *ABS*	00000000 __ram_rwdata_end
000105e0 g       *ABS*	00000000 __ram_rodata_end
00010600 g     O .bss	00000004 jtag_uart_0
00010604 g       *ABS*	00000000 end
00014000 g       *ABS*	00000000 __alt_stack_pointer
0001055c g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
0001005c g     F .text	00000038 _wait
00010558 g     F .text	00000004 alt_sys_init
000105e0 g       *ABS*	00000000 __ram_rwdata_start
000105bc g       *ABS*	00000000 __ram_rodata_start
00010604 g       *ABS*	00000000 __alt_stack_base
000105f0 g       *ABS*	00000000 __bss_start
000102f0 g     F .text	00000104 main
000105f4 g     O .bss	00000004 alt_envp
000105f0 g     O .bss	00000004 buttoncount
000105bc g       *ABS*	00000000 __flash_rodata_start
00010538 g     F .text	00000020 alt_irq_init
000105fc g     O .bss	00000004 alt_argc
000105e4 g     O .rwdata	00000004 Period0
00010020 g       *ABS*	00000000 __ram_exceptions_start
000105e8 g       *ABS*	00000000 _edata
00010604 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010598 g     F .text	00000008 altera_nios2_qsys_irq_init
00014000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
000105a0 g     F .text	0000001c strlen
00010190 g     F .text	00000160 SetPeriod
000105e0 g     O .rwdata	00000004 Decode0
00010594 g     F .text	00000004 alt_icache_flush_all
000103f4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a17814 	ori	gp,gp,34272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10817c14 	ori	r2,r2,1520

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c18114 	ori	r3,r3,1540

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_gp+0xffff7a64>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00103f40 	call	103f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00104d40 	call	104d4 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <_gp+0xffff7a78>

0001005c <_wait>:
unsigned long Decode0 = 25000000;
int buttoncount = 0;

void _wait(loop_count) // _wait(700000)궳뽵1뷳
int loop_count;
{
   1005c:	defffe04 	addi	sp,sp,-8
	volatile int sum, data;
	sum	= 0;
   10060:	d8000115 	stw	zero,4(sp)
	for (data = 0; data < loop_count; data++) {
   10064:	d8000015 	stw	zero,0(sp)
   10068:	d8800017 	ldw	r2,0(sp)
   1006c:	1100070e 	bge	r2,r4,1008c <_wait+0x30>
		sum = (data << 8);
   10070:	d8800017 	ldw	r2,0(sp)
   10074:	1004923a 	slli	r2,r2,8
   10078:	d8800115 	stw	r2,4(sp)
void _wait(loop_count) // _wait(700000)궳뽵1뷳
int loop_count;
{
	volatile int sum, data;
	sum	= 0;
	for (data = 0; data < loop_count; data++) {
   1007c:	d8800017 	ldw	r2,0(sp)
   10080:	10800044 	addi	r2,r2,1
   10084:	d8800015 	stw	r2,0(sp)
   10088:	003ff706 	br	10068 <_gp+0xffff7a88>
		sum = (data << 8);
	}
  return;
}
   1008c:	dec00204 	addi	sp,sp,8
   10090:	f800283a 	ret

00010094 <SevenSegEnc>:

int SevenSegEnc(int n) {
	int res = 0xc0;

	if(n == 0) res = 0xc0;
   10094:	20003c26 	beq	r4,zero,10188 <SevenSegEnc+0xf4>
	else if(n == 1) res = 0xf9;
   10098:	00800044 	movi	r2,1
   1009c:	20801e26 	beq	r4,r2,10118 <SevenSegEnc+0x84>
	else if(n == 2) res = 0xa4;
   100a0:	00800084 	movi	r2,2
   100a4:	20801e26 	beq	r4,r2,10120 <SevenSegEnc+0x8c>
	else if(n == 3) res = 0xb0;
   100a8:	008000c4 	movi	r2,3
   100ac:	20801e26 	beq	r4,r2,10128 <SevenSegEnc+0x94>
	else if(n == 4) res = 0x99;
   100b0:	00800104 	movi	r2,4
   100b4:	20801e26 	beq	r4,r2,10130 <SevenSegEnc+0x9c>
	else if(n == 5) res = 0x92;
   100b8:	00800144 	movi	r2,5
   100bc:	20801e26 	beq	r4,r2,10138 <SevenSegEnc+0xa4>
	else if(n == 6) res = 0x82;
   100c0:	00800184 	movi	r2,6
   100c4:	20801e26 	beq	r4,r2,10140 <SevenSegEnc+0xac>
	else if(n == 7) res = 0xf8;
   100c8:	008001c4 	movi	r2,7
   100cc:	20801e26 	beq	r4,r2,10148 <SevenSegEnc+0xb4>
	else if(n == 8) res = 0x80;
   100d0:	00800204 	movi	r2,8
   100d4:	20801e26 	beq	r4,r2,10150 <SevenSegEnc+0xbc>
	else if(n == 9) res = 0x98;
   100d8:	00800244 	movi	r2,9
   100dc:	20801e26 	beq	r4,r2,10158 <SevenSegEnc+0xc4>
	else if(n == 10) res = 0x88;
   100e0:	00800284 	movi	r2,10
   100e4:	20801e26 	beq	r4,r2,10160 <SevenSegEnc+0xcc>
	else if(n == 11) res = 0x83;
   100e8:	008002c4 	movi	r2,11
   100ec:	20801e26 	beq	r4,r2,10168 <SevenSegEnc+0xd4>
	else if(n == 12) res = 0xa7;
   100f0:	00800304 	movi	r2,12
   100f4:	20801e26 	beq	r4,r2,10170 <SevenSegEnc+0xdc>
	else if(n == 13) res = 0xa1;
   100f8:	00800344 	movi	r2,13
   100fc:	20801e26 	beq	r4,r2,10178 <SevenSegEnc+0xe4>
	else if(n == 14) res = 0x86;
   10100:	00800384 	movi	r2,14
   10104:	20801e26 	beq	r4,r2,10180 <SevenSegEnc+0xec>
	else if(n == 15) res = 0x8e;
   10108:	008003c4 	movi	r2,15
   1010c:	20801e1e 	bne	r4,r2,10188 <SevenSegEnc+0xf4>
   10110:	00802384 	movi	r2,142
   10114:	f800283a 	ret

int SevenSegEnc(int n) {
	int res = 0xc0;

	if(n == 0) res = 0xc0;
	else if(n == 1) res = 0xf9;
   10118:	00803e44 	movi	r2,249
   1011c:	f800283a 	ret
	else if(n == 2) res = 0xa4;
   10120:	00802904 	movi	r2,164
   10124:	f800283a 	ret
	else if(n == 3) res = 0xb0;
   10128:	00802c04 	movi	r2,176
   1012c:	f800283a 	ret
	else if(n == 4) res = 0x99;
   10130:	00802644 	movi	r2,153
   10134:	f800283a 	ret
	else if(n == 5) res = 0x92;
   10138:	00802484 	movi	r2,146
   1013c:	f800283a 	ret
	else if(n == 6) res = 0x82;
   10140:	00802084 	movi	r2,130
   10144:	f800283a 	ret
	else if(n == 7) res = 0xf8;
   10148:	00803e04 	movi	r2,248
   1014c:	f800283a 	ret
	else if(n == 8) res = 0x80;
   10150:	00802004 	movi	r2,128
   10154:	f800283a 	ret
	else if(n == 9) res = 0x98;
   10158:	00802604 	movi	r2,152
   1015c:	f800283a 	ret
	else if(n == 10) res = 0x88;
   10160:	00802204 	movi	r2,136
   10164:	f800283a 	ret
	else if(n == 11) res = 0x83;
   10168:	008020c4 	movi	r2,131
   1016c:	f800283a 	ret
	else if(n == 12) res = 0xa7;
   10170:	008029c4 	movi	r2,167
   10174:	f800283a 	ret
	else if(n == 13) res = 0xa1;
   10178:	00802844 	movi	r2,161
   1017c:	f800283a 	ret
	else if(n == 14) res = 0x86;
   10180:	00802184 	movi	r2,134
   10184:	f800283a 	ret
	}
  return;
}

int SevenSegEnc(int n) {
	int res = 0xc0;
   10188:	00803004 	movi	r2,192
	else if(n == 12) res = 0xa7;
	else if(n == 13) res = 0xa1;
	else if(n == 14) res = 0x86;
	else if(n == 15) res = 0x8e;
	return res;
}
   1018c:	f800283a 	ret

00010190 <SetPeriod>:

void SetPeriod(int n) {
	if(n == 0) Period0 = 50000000;
   10190:	2000031e 	bne	r4,zero,101a0 <SetPeriod+0x10>
   10194:	0080bef4 	movhi	r2,763
   10198:	10bc2004 	addi	r2,r2,-3968
   1019c:	00004a06 	br	102c8 <SetPeriod+0x138>
	else if(n == 1) Period0 = 40000000;
   101a0:	00800044 	movi	r2,1
   101a4:	2080031e 	bne	r4,r2,101b4 <SetPeriod+0x24>
   101a8:	008098b4 	movhi	r2,610
   101ac:	10968004 	addi	r2,r2,23040
   101b0:	00004506 	br	102c8 <SetPeriod+0x138>
	else if(n == 2) Period0 = 35000000;
   101b4:	00800084 	movi	r2,2
   101b8:	2080031e 	bne	r4,r2,101c8 <SetPeriod+0x38>
   101bc:	008085b4 	movhi	r2,534
   101c0:	1083b004 	addi	r2,r2,3776
   101c4:	00004006 	br	102c8 <SetPeriod+0x138>
	else if(n == 3) Period0 = 30000000;
   101c8:	008000c4 	movi	r2,3
   101cc:	2080031e 	bne	r4,r2,101dc <SetPeriod+0x4c>
   101d0:	008072b4 	movhi	r2,458
   101d4:	10b0e004 	addi	r2,r2,-15488
   101d8:	00003b06 	br	102c8 <SetPeriod+0x138>
	else if(n == 4) Period0 = 25000000;
   101dc:	00800104 	movi	r2,4
   101e0:	2080031e 	bne	r4,r2,101f0 <SetPeriod+0x60>
   101e4:	00805f74 	movhi	r2,381
   101e8:	109e1004 	addi	r2,r2,30784
   101ec:	00003606 	br	102c8 <SetPeriod+0x138>
	else if(n == 5) Period0 = 20000000;
   101f0:	00800144 	movi	r2,5
   101f4:	2080031e 	bne	r4,r2,10204 <SetPeriod+0x74>
   101f8:	00804c74 	movhi	r2,305
   101fc:	108b4004 	addi	r2,r2,11520
   10200:	00003106 	br	102c8 <SetPeriod+0x138>
	else if(n == 6) Period0 = 16000000;
   10204:	00800184 	movi	r2,6
   10208:	2080031e 	bne	r4,r2,10218 <SetPeriod+0x88>
   1020c:	00803d34 	movhi	r2,244
   10210:	10890004 	addi	r2,r2,9216
   10214:	00002c06 	br	102c8 <SetPeriod+0x138>
	else if(n == 7) Period0 = 13000000;
   10218:	008001c4 	movi	r2,7
   1021c:	2080031e 	bne	r4,r2,1022c <SetPeriod+0x9c>
   10220:	008031b4 	movhi	r2,198
   10224:	10975004 	addi	r2,r2,23872
   10228:	00002706 	br	102c8 <SetPeriod+0x138>
	else if(n == 8) Period0 = 10000000;
   1022c:	00800204 	movi	r2,8
   10230:	2080031e 	bne	r4,r2,10240 <SetPeriod+0xb0>
   10234:	00802674 	movhi	r2,153
   10238:	10a5a004 	addi	r2,r2,-27008
   1023c:	00002206 	br	102c8 <SetPeriod+0x138>
	else if(n == 9) Period0 = 8000000;
   10240:	00800244 	movi	r2,9
   10244:	2080031e 	bne	r4,r2,10254 <SetPeriod+0xc4>
   10248:	00801eb4 	movhi	r2,122
   1024c:	10848004 	addi	r2,r2,4608
   10250:	00001d06 	br	102c8 <SetPeriod+0x138>
	else if(n == 10) Period0 = 6000000;
   10254:	00800284 	movi	r2,10
   10258:	2080031e 	bne	r4,r2,10268 <SetPeriod+0xd8>
   1025c:	00801734 	movhi	r2,92
   10260:	10a36004 	addi	r2,r2,-29312
   10264:	00001806 	br	102c8 <SetPeriod+0x138>
	else if(n == 11) Period0 = 5000000;
   10268:	008002c4 	movi	r2,11
   1026c:	2080031e 	bne	r4,r2,1027c <SetPeriod+0xec>
   10270:	00801334 	movhi	r2,76
   10274:	1092d004 	addi	r2,r2,19264
   10278:	00001306 	br	102c8 <SetPeriod+0x138>
	else if(n == 12) Period0 = 4000000;
   1027c:	00800304 	movi	r2,12
   10280:	2080031e 	bne	r4,r2,10290 <SetPeriod+0x100>
   10284:	00800f74 	movhi	r2,61
   10288:	10824004 	addi	r2,r2,2304
   1028c:	00000e06 	br	102c8 <SetPeriod+0x138>
	else if(n == 13) Period0 = 3500000;
   10290:	00800344 	movi	r2,13
   10294:	2080031e 	bne	r4,r2,102a4 <SetPeriod+0x114>
   10298:	00800d74 	movhi	r2,53
   1029c:	1099f804 	addi	r2,r2,26592
   102a0:	00000906 	br	102c8 <SetPeriod+0x138>
	else if(n == 14) Period0 = 3000000;
   102a4:	00800384 	movi	r2,14
   102a8:	2080031e 	bne	r4,r2,102b8 <SetPeriod+0x128>
   102ac:	00800bb4 	movhi	r2,46
   102b0:	10b1b004 	addi	r2,r2,-14656
   102b4:	00000406 	br	102c8 <SetPeriod+0x138>
	else if(n == 15) Period0 = 2500000;
   102b8:	008003c4 	movi	r2,15
   102bc:	2080031e 	bne	r4,r2,102cc <SetPeriod+0x13c>
   102c0:	008009b4 	movhi	r2,38
   102c4:	10896804 	addi	r2,r2,9632
   102c8:	d0a00115 	stw	r2,-32764(gp)

	Decode0 = Period0 >> 1;
   102cc:	d0a00117 	ldw	r2,-32764(gp)
   102d0:	1006d07a 	srli	r3,r2,1
   102d4:	d0e00015 	stw	r3,-32768(gp)
	*(volatile unsigned long *)PERIOD0_BASE = Period0;
   102d8:	00c000b4 	movhi	r3,2
   102dc:	18800015 	stw	r2,0(r3)
	*(volatile unsigned long *)DECODE0_BASE = Decode0;
   102e0:	d0e00017 	ldw	r3,-32768(gp)
   102e4:	008000f4 	movhi	r2,3
   102e8:	10c00015 	stw	r3,0(r2)
   102ec:	f800283a 	ret

000102f0 <main>:
int main()
{
	unsigned long reg1 = 0;
	unsigned long reg1old, reg1tmp, reg2tmp, reg3tmp;

	*(volatile unsigned long *)PERIOD0_BASE = Period0;
   102f0:	d0e00117 	ldw	r3,-32764(gp)
	*(volatile unsigned long *)PERIOD0_BASE = Period0;
	*(volatile unsigned long *)DECODE0_BASE = Decode0;
}

int main()
{
   102f4:	defff904 	addi	sp,sp,-28
   102f8:	dcc00315 	stw	r19,12(sp)
   102fc:	dc800215 	stw	r18,8(sp)
   10300:	dc400115 	stw	r17,4(sp)
   10304:	dfc00615 	stw	ra,24(sp)
   10308:	dd400515 	stw	r21,20(sp)
   1030c:	dd000415 	stw	r20,16(sp)
   10310:	dc000015 	stw	r16,0(sp)
	unsigned long reg1 = 0;
	unsigned long reg1old, reg1tmp, reg2tmp, reg3tmp;

	*(volatile unsigned long *)PERIOD0_BASE = Period0;
   10314:	008000b4 	movhi	r2,2
   10318:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)DECODE0_BASE = Decode0;
   1031c:	d0e00017 	ldw	r3,-32768(gp)
   10320:	008000f4 	movhi	r2,3
	*(volatile unsigned long *)HEX0_BASE = 0xc0;

  alt_putstr("Hello from Nios II!   JBL   ...\n");
   10324:	01000074 	movhi	r4,1
{
	unsigned long reg1 = 0;
	unsigned long reg1old, reg1tmp, reg2tmp, reg3tmp;

	*(volatile unsigned long *)PERIOD0_BASE = Period0;
	*(volatile unsigned long *)DECODE0_BASE = Decode0;
   10328:	10c00015 	stw	r3,0(r2)
	*(volatile unsigned long *)HEX0_BASE = 0xc0;
   1032c:	00c03004 	movi	r3,192
   10330:	00800134 	movhi	r2,4
   10334:	10c00015 	stw	r3,0(r2)

  alt_putstr("Hello from Nios II!   JBL   ...\n");
   10338:	21016f04 	addi	r4,r4,1468
   1033c:	00105000 	call	10500 <alt_putstr>
	*(volatile unsigned long *)DECODE0_BASE = Decode0;
}

int main()
{
	unsigned long reg1 = 0;
   10340:	0025883a 	mov	r18,zero

  alt_putstr("Hello from Nios II!   JBL   ...\n");

	while (1) {
    	reg1old = reg1;
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
   10344:	04400174 	movhi	r17,5

    	if(reg1 != reg1old) {
    		_wait(200000);
    	}

    	if((reg1 & 0x03) == 0x01) { // button2걁Up??깛걂궕돓궠귢궫
   10348:	04c00044 	movi	r19,1
  alt_putstr("Hello from Nios II!   JBL   ...\n");

	while (1) {
    	reg1old = reg1;
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
   1034c:	0109c404 	movi	r4,10000

  alt_putstr("Hello from Nios II!   JBL   ...\n");

	while (1) {
    	reg1old = reg1;
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
   10350:	8c000017 	ldw	r16,0(r17)
    	_wait(10000);
   10354:	001005c0 	call	1005c <_wait>
      	reg2tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
   10358:	0109c404 	movi	r4,10000

	while (1) {
    	reg1old = reg1;
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
      	reg2tmp = *(volatile unsigned long *)PUSH_BASE;
   1035c:	8d400017 	ldw	r21,0(r17)
    	_wait(10000);
   10360:	001005c0 	call	1005c <_wait>
     	reg3tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
   10364:	0109c404 	movi	r4,10000
    	reg1old = reg1;
      	reg1tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
      	reg2tmp = *(volatile unsigned long *)PUSH_BASE;
    	_wait(10000);
     	reg3tmp = *(volatile unsigned long *)PUSH_BASE;
   10368:	8d000017 	ldw	r20,0(r17)
    	_wait(10000);
   1036c:	001005c0 	call	1005c <_wait>
    	reg1 = *(volatile unsigned long *)PUSH_BASE;
   10370:	88800017 	ldw	r2,0(r17)
    	if(reg1 == reg1tmp && reg1 == reg2tmp && reg1 == reg3tmp) {
   10374:	8080071e 	bne	r16,r2,10394 <main+0xa4>
   10378:	8540061e 	bne	r16,r21,10394 <main+0xa4>
   1037c:	8500051e 	bne	r16,r20,10394 <main+0xa4>
    	} else {
    		reg1 = reg1old;
    	}

    	if(reg1 != reg1old) {
   10380:	94000426 	beq	r18,r16,10394 <main+0xa4>
    		_wait(200000);
   10384:	010000f4 	movhi	r4,3
   10388:	21035004 	addi	r4,r4,3392
   1038c:	001005c0 	call	1005c <_wait>
   10390:	8025883a 	mov	r18,r16
    	}

    	if((reg1 & 0x03) == 0x01) { // button2걁Up??깛걂궕돓궠귢궫
   10394:	90c000cc 	andi	r3,r18,3
   10398:	d0a00417 	ldw	r2,-32752(gp)
   1039c:	1cc0061e 	bne	r3,r19,103b8 <main+0xc8>
    		if(buttoncount == 15) buttoncount = 0;
   103a0:	00c003c4 	movi	r3,15
   103a4:	10c0021e 	bne	r2,r3,103b0 <main+0xc0>
   103a8:	d0200415 	stw	zero,-32752(gp)
   103ac:	00000906 	br	103d4 <main+0xe4>
    		else buttoncount++;
   103b0:	10800044 	addi	r2,r2,1
   103b4:	00000606 	br	103d0 <main+0xe0>
    	}
    	if((reg1 & 0x03) == 0x02) { // button1걁Down??깛걂궕돓궠귢궫
   103b8:	01000084 	movi	r4,2
   103bc:	1900051e 	bne	r3,r4,103d4 <main+0xe4>
    		if(buttoncount == 0) buttoncount = 15;
   103c0:	1000021e 	bne	r2,zero,103cc <main+0xdc>
   103c4:	008003c4 	movi	r2,15
   103c8:	00000106 	br	103d0 <main+0xe0>
    		else buttoncount--;
   103cc:	10bfffc4 	addi	r2,r2,-1
   103d0:	d0a00415 	stw	r2,-32752(gp)
    	}
		*(volatile unsigned long *)HEX0_BASE = SevenSegEnc(buttoncount);
   103d4:	d4200417 	ldw	r16,-32752(gp)
   103d8:	8009883a 	mov	r4,r16
   103dc:	00100940 	call	10094 <SevenSegEnc>
   103e0:	00c00134 	movhi	r3,4
   103e4:	18800015 	stw	r2,0(r3)
		SetPeriod(buttoncount);
   103e8:	8009883a 	mov	r4,r16
   103ec:	00101900 	call	10190 <SetPeriod>
	}
   103f0:	003fd606 	br	1034c <_gp+0xffff7d6c>

000103f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103f4:	deffff04 	addi	sp,sp,-4
   103f8:	01000074 	movhi	r4,1
   103fc:	01400074 	movhi	r5,1
   10400:	dfc00015 	stw	ra,0(sp)
   10404:	21017804 	addi	r4,r4,1504
   10408:	29417a04 	addi	r5,r5,1512

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1040c:	2140061e 	bne	r4,r5,10428 <alt_load+0x34>
   10410:	01000074 	movhi	r4,1
   10414:	01400074 	movhi	r5,1
   10418:	21000804 	addi	r4,r4,32
   1041c:	29400804 	addi	r5,r5,32
   10420:	2140121e 	bne	r4,r5,1046c <alt_load+0x78>
   10424:	00000b06 	br	10454 <alt_load+0x60>
   10428:	00c00074 	movhi	r3,1
   1042c:	18c17a04 	addi	r3,r3,1512
   10430:	1907c83a 	sub	r3,r3,r4
   10434:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10438:	10fff526 	beq	r2,r3,10410 <_gp+0xffff7e30>
    {
      *to++ = *from++;
   1043c:	114f883a 	add	r7,r2,r5
   10440:	39c00017 	ldw	r7,0(r7)
   10444:	110d883a 	add	r6,r2,r4
   10448:	10800104 	addi	r2,r2,4
   1044c:	31c00015 	stw	r7,0(r6)
   10450:	003ff906 	br	10438 <_gp+0xffff7e58>
   10454:	01000074 	movhi	r4,1
   10458:	01400074 	movhi	r5,1
   1045c:	21016f04 	addi	r4,r4,1468
   10460:	29416f04 	addi	r5,r5,1468

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10464:	2140101e 	bne	r4,r5,104a8 <alt_load+0xb4>
   10468:	00000b06 	br	10498 <alt_load+0xa4>
   1046c:	00c00074 	movhi	r3,1
   10470:	18c00804 	addi	r3,r3,32
   10474:	1907c83a 	sub	r3,r3,r4
   10478:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1047c:	10fff526 	beq	r2,r3,10454 <_gp+0xffff7e74>
    {
      *to++ = *from++;
   10480:	114f883a 	add	r7,r2,r5
   10484:	39c00017 	ldw	r7,0(r7)
   10488:	110d883a 	add	r6,r2,r4
   1048c:	10800104 	addi	r2,r2,4
   10490:	31c00015 	stw	r7,0(r6)
   10494:	003ff906 	br	1047c <_gp+0xffff7e9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10498:	00105900 	call	10590 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1049c:	dfc00017 	ldw	ra,0(sp)
   104a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   104a4:	00105941 	jmpi	10594 <alt_icache_flush_all>
   104a8:	00c00074 	movhi	r3,1
   104ac:	18c17804 	addi	r3,r3,1504
   104b0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   104b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   104b8:	18bff726 	beq	r3,r2,10498 <_gp+0xffff7eb8>
    {
      *to++ = *from++;
   104bc:	114f883a 	add	r7,r2,r5
   104c0:	39c00017 	ldw	r7,0(r7)
   104c4:	110d883a 	add	r6,r2,r4
   104c8:	10800104 	addi	r2,r2,4
   104cc:	31c00015 	stw	r7,0(r6)
   104d0:	003ff906 	br	104b8 <_gp+0xffff7ed8>

000104d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104dc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104e0:	00105380 	call	10538 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104e4:	00105580 	call	10558 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104e8:	d1a00517 	ldw	r6,-32748(gp)
   104ec:	d1600617 	ldw	r5,-32744(gp)
   104f0:	d1200717 	ldw	r4,-32740(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   104f4:	dfc00017 	ldw	ra,0(sp)
   104f8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104fc:	00102f01 	jmpi	102f0 <main>

00010500 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10500:	defffe04 	addi	sp,sp,-8
   10504:	dc000015 	stw	r16,0(sp)
   10508:	dfc00115 	stw	ra,4(sp)
   1050c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10510:	00105a00 	call	105a0 <strlen>
   10514:	01000074 	movhi	r4,1
   10518:	000f883a 	mov	r7,zero
   1051c:	100d883a 	mov	r6,r2
   10520:	800b883a 	mov	r5,r16
   10524:	21018004 	addi	r4,r4,1536
#else
    return fputs(str, stdout);
#endif
#endif
}
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	dc000017 	ldw	r16,0(sp)
   10530:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10534:	001055c1 	jmpi	1055c <altera_avalon_jtag_uart_write>

00010538 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10538:	deffff04 	addi	sp,sp,-4
   1053c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   10540:	00105980 	call	10598 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10544:	00800044 	movi	r2,1
   10548:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1054c:	dfc00017 	ldw	ra,0(sp)
   10550:	dec00104 	addi	sp,sp,4
   10554:	f800283a 	ret

00010558 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10558:	f800283a 	ret

0001055c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1055c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10560:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10564:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10568:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1056c:	2980072e 	bgeu	r5,r6,1058c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10570:	38c00037 	ldwio	r3,0(r7)
   10574:	18ffffec 	andhi	r3,r3,65535
   10578:	183ffc26 	beq	r3,zero,1056c <_gp+0xffff7f8c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1057c:	28c00007 	ldb	r3,0(r5)
   10580:	20c00035 	stwio	r3,0(r4)
   10584:	29400044 	addi	r5,r5,1
   10588:	003ff806 	br	1056c <_gp+0xffff7f8c>

  return count;
}
   1058c:	f800283a 	ret

00010590 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10590:	f800283a 	ret

00010594 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10594:	f800283a 	ret

00010598 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10598:	000170fa 	wrctl	ienable,zero
   1059c:	f800283a 	ret

000105a0 <strlen>:
   105a0:	2005883a 	mov	r2,r4
   105a4:	10c00007 	ldb	r3,0(r2)
   105a8:	18000226 	beq	r3,zero,105b4 <strlen+0x14>
   105ac:	10800044 	addi	r2,r2,1
   105b0:	003ffc06 	br	105a4 <_gp+0xffff7fc4>
   105b4:	1105c83a 	sub	r2,r2,r4
   105b8:	f800283a 	ret
